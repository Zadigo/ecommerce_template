
@method_decorator(cache_control(private=True), name='dispatch')
class _ShipmentView(generic.ListView):
    model = models.Cart
    template_name = 'pages/shipment.html'
    context_object_name = 'products'

    def get(self, request, **kwargs):
        get_request = super().get(request)

        cart_id = self.request.session.get('cart_id')
        if cart_id is None:
            return redirect(reverse('cart:no_cart'))

        queryset = super().get_queryset().filter(cart_id=cart_id)
        if not queryset.exists():
            return redirect(reverse('cart:no_cart'))
        return get_request

    def get_queryset(self, **kwargs):
        cart_id = self.request.session.get('cart_id')
        return models.Cart.cart_manager.cart_products(cart_id)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        products = self.get_queryset(**kwargs)
        cart_id = self.request.session.get('cart_id')

        context['cart_id'] = cart_id
        context['coupon_form'] = forms.CouponForm
        # context['has_coupon'] = self.get_queryset().first().coupon.has_coupon
        context['cart_total'] = self.model.cart_manager.cart_total(cart_id)[
            'cart_total']

        context['impressions'] = create_cart_impressions(products)
        return context


@method_decorator(never_cache, name='dispatch')
class _PaymentView(generic.ListView):
    model = models.Cart
    template_name = 'pages/payment.html'
    context_object_name = 'products'

    def get(self, request, **kwargs):
        get_request = super().get(request)

        cart_id = self.request.session.get('cart_id')
        if cart_id is None:
            return redirect(reverse(reverse('cart:no_cart')))

        queryset = super().get_queryset().filter(cart_id=cart_id)
        if not queryset.exists():
            return redirect(reverse(reverse('cart:no_cart')))
        return get_request

    def post(self, request, **kwargs):
        context = self.get_context_data(object_list=self.get_queryset(), **kwargs)
        payment.PreprocessPayment(request, set_in_session=True, shipping='standard')
        return render(request, self.template_name, context)

    def get_queryset(self, **kwargs):
        cart_id = self.request.session.get('cart_id')
        return models.Cart.cart_manager.cart_products(cart_id)

    def get_context_data(self, object_list=None, **kwargs):
        context = super().get_context_data(object_list=object_list, **kwargs)
        products = self.get_queryset(**kwargs)
        cart_id = self.request.session.get('cart_id')
        context['cart_id'] = cart_id
        context['cart_total'] = self.model.cart_manager.cart_total(cart_id)['cart_total']
        context['impressions'] = create_cart_impressions(products)
        return context


class _CheckoutView(generic.ListView):
    model = models.Cart
    template_name = 'pages/cart.html'
    context_object_name = 'constructed_products'

    def get(self, request, **kwargs):
        # TODO: Make sure when the customer
        # reduces the cart and it goes to
        # zero to delete the cart ID from
        # his session
        get_request = super().get(request)

        cart_id = self.request.session.get('cart_id')
        if cart_id is None:
            return redirect(reverse('cart:no_cart'))

        queryset = super().get_queryset().filter(cart_id=cart_id)
        if not queryset.exists():
            return redirect(reverse('cart:no_cart'))
        return get_request

    def post(self, request, **kwargs):
        return JsonResponse({'success': 'success'})

    def get_queryset(self, **kwargs):
        cart_id = self.request.session.get('cart_id')
        return models.Cart.cart_manager.cart_products(cart_id)

    def get_context_data(self, **kwargs):
        products = super().get_queryset()
        context = super().get_context_data()

        context['vue_products'] = self.get_queryset()

        products = self.get_queryset(**kwargs)['constructed_products']
        context['impressions'] = create_cart_impressions(products)

        cart_id = self.request.session.get('cart_id')
        context['cart_total'] = self.model.cart_manager.cart_total(cart_id)['cart_total']
        return context
